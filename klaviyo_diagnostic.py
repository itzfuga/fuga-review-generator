#!/usr/bin/env python3
"""
Klaviyo Reviews API Diagnostic Tool
Tests different API endpoints and formats to find what works
"""

import os
import requests
import json
from datetime import datetime

def test_klaviyo_reviews_api():
    """Test various Klaviyo Reviews API approaches"""
    
    api_key = os.environ.get('KLAVIYO_API_KEY')
    if not api_key:
        print("‚ùå KLAVIYO_API_KEY not found in environment variables")
        return
    
    print(f"üîë Using API Key: {api_key[:10]}...")
    print("\n" + "="*60)
    print("TESTING KLAVIYO REVIEWS API")
    print("="*60)
    
    # Test 1: API Key validation
    print("\n1Ô∏è‚É£ Testing API Key Validation...")
    test_api_key_validation(api_key)
    
    # Test 2: Current approach (what we're using now)
    print("\n2Ô∏è‚É£ Testing Current Reviews API Approach...")
    test_current_api_approach(api_key)
    
    # Test 3: Alternative endpoints
    print("\n3Ô∏è‚É£ Testing Alternative API Endpoints...")
    test_alternative_endpoints(api_key)
    
    # Test 4: Bulk import API
    print("\n4Ô∏è‚É£ Testing Bulk Import API...")
    test_bulk_import_api(api_key)

def test_api_key_validation(api_key):
    """Test if API key is valid"""
    try:
        headers = {
            'Authorization': f'Klaviyo-API-Key {api_key}',
            'revision': '2024-10-15'
        }
        
        response = requests.get('https://a.klaviyo.com/api/accounts/', headers=headers)
        
        if response.status_code == 200:
            account_data = response.json()
            print(f"‚úÖ API Key Valid - Account: {account_data.get('data', [{}])[0].get('attributes', {}).get('contact_information', {}).get('organization_name', 'Unknown')}")
        else:
            print(f"‚ùå API Key Error: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå API Key Test Failed: {e}")

def test_current_api_approach(api_key):
    """Test our current review creation approach"""
    try:
        headers = {
            'Authorization': f'Klaviyo-API-Key {api_key}',
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'revision': '2024-10-15'
        }
        
        # Sample review data
        test_review = {
            "data": {
                "type": "review",
                "attributes": {
                    "rating": 5,
                    "title": "Test Review",
                    "body": "This is a test review generated by the diagnostic tool",
                    "reviewer_name": "Test User",
                    "reviewer_email": "test@example.com",
                    "created": datetime.now().strftime('%Y-%m-%d'),
                    "verified": True
                },
                "relationships": {
                    "item": {
                        "data": {
                            "type": "catalog-item", 
                            "id": "$shopify:::$default:::test-product-123"
                        }
                    }
                }
            }
        }
        
        print(f"üì§ Sending test review to: https://a.klaviyo.com/api/reviews/")
        print(f"üìù Data: {json.dumps(test_review, indent=2)}")
        
        response = requests.post(
            'https://a.klaviyo.com/api/reviews/',
            headers=headers,
            json=test_review
        )
        
        print(f"üì• Response: {response.status_code}")
        print(f"üìÑ Response Body: {response.text}")
        
        if response.status_code in [200, 201]:
            print("‚úÖ Current API approach works!")
        else:
            print(f"‚ùå Current API approach failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Current API Test Failed: {e}")

def test_alternative_endpoints(api_key):
    """Test alternative API endpoints for reviews"""
    endpoints = [
        'https://a.klaviyo.com/api/review/',  # Singular
        'https://a.klaviyo.com/api/reviews',   # No trailing slash
        'https://a.klaviyo.com/api/catalog-items/{item_id}/reviews/',  # Item-specific
        'https://a.klaviyo.com/api/events/',   # As events
    ]
    
    headers = {
        'Authorization': f'Klaviyo-API-Key {api_key}',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'revision': '2024-10-15'
    }
    
    for endpoint in endpoints:
        try:
            print(f"\nüîç Testing: {endpoint}")
            
            if 'events' in endpoint:
                # Test as event
                test_data = {
                    "data": {
                        "type": "event",
                        "attributes": {
                            "metric": {"name": "Product Review"},
                            "properties": {
                                "rating": 5,
                                "review_title": "Test Review",
                                "review_content": "Test content",
                                "product_id": "test-123"
                            },
                            "profile": {
                                "email": "test@example.com",
                                "first_name": "Test",
                                "last_name": "User"
                            }
                        }
                    }
                }
            else:
                # Test as review
                test_data = {
                    "data": {
                        "type": "review",
                        "attributes": {
                            "rating": 5,
                            "title": "Test Review",
                            "body": "Test content"
                        }
                    }
                }
            
            response = requests.post(endpoint, headers=headers, json=test_data)
            print(f"   Status: {response.status_code}")
            
            if response.status_code < 400:
                print(f"   ‚úÖ Success: {response.text[:100]}...")
            else:
                print(f"   ‚ùå Failed: {response.text[:100]}...")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def test_bulk_import_api(api_key):
    """Test Klaviyo's bulk import API for profiles/events"""
    try:
        headers = {
            'Authorization': f'Klaviyo-API-Key {api_key}',
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'revision': '2024-10-15'
        }
        
        # Test bulk profile import (might work for review data)
        bulk_data = {
            "data": {
                "type": "profile-import",
                "attributes": {
                    "profiles": [
                        {
                            "email": "test@example.com",
                            "first_name": "Test",
                            "last_name": "User",
                            "properties": {
                                "product_review_rating": 5,
                                "product_review_title": "Test Review",
                                "product_review_content": "Test content",
                                "product_id": "test-123"
                            }
                        }
                    ]
                }
            }
        }
        
        print(f"üì§ Testing bulk import endpoint...")
        
        response = requests.post(
            'https://a.klaviyo.com/api/profile-import/',
            headers=headers,
            json=bulk_data
        )
        
        print(f"üì• Bulk Import Response: {response.status_code}")
        print(f"üìÑ Response: {response.text}")
        
        if response.status_code in [200, 201, 202]:
            print("‚úÖ Bulk import might be an option!")
        else:
            print(f"‚ùå Bulk import failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Bulk Import Test Failed: {e}")

def suggest_solutions():
    """Suggest potential solutions based on test results"""
    print("\n" + "="*60)
    print("üí° POTENTIAL SOLUTIONS")
    print("="*60)
    
    print("""
    Based on the diagnostic results, here are potential solutions:
    
    üîß Solution 1: Web Automation
    - Use Selenium/Playwright to automate the manual CSV upload
    - Navigate to https://www.klaviyo.com/reviews/import/upload
    - Upload the CSV file programmatically
    
    üîß Solution 2: Different API Approach  
    - Try posting reviews as custom events instead
    - Use the Events API with review data as properties
    
    üîß Solution 3: CSV Format Optimization
    - Ensure CSV matches Klaviyo's expected format exactly
    - Test with minimal required fields first
    
    üîß Solution 4: Bulk Import API
    - Use profile import API with review data as properties
    - May allow bulk processing of review data
    
    üîß Solution 5: Klaviyo Support
    - Contact Klaviyo support for proper review import method
    - Get official guidance on programmatic review imports
    """)

if __name__ == "__main__":
    test_klaviyo_reviews_api()
    suggest_solutions()