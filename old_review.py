import csv
import random
from datetime import datetime, timedelta
import re
import os
from faker import Faker

# Initialisieren der Faker-Library f√ºr mehrere Regionen
fake_de = Faker('de_DE')
fake_en = Faker('en_US')
fake_pl = Faker('pl_PL')
fake_ru = Faker('ru_RU')

# Listen mit m√∂glichen Bewertungstiteln nach Sprache und Bewertungszahl
review_titles = {
    "de": {
        5: [
            "Absolut fantastisch!", "Perfektes Produkt!", "Begeistert!", "√úbertrifft alle Erwartungen!",
            "Einfach traumhaft!", "Ein Muss f√ºr jeden!", "Kann ich nur empfehlen!", "Bestes Produkt ever!",
            "Erstklassige Qualit√§t!", "Liebe es!", "Top Produkt!", "Hervorragende Wahl!", "Mega Teil!",
            "Voll cool!", "Krass gut!", "Einfach nur wow!", "Beste Entscheidung ever!"
        ],
        4: [
            "Sehr gutes Produkt", "Fast perfekt", "Wirklich sch√∂n", "Bin sehr zufrieden",
            "Gute Qualit√§t", "Macht einen tollen Eindruck", "Empfehlenswert", "Positiv √ºberrascht",
            "Toller Kauf", "Gutes Preis-Leistungs-Verh√§ltnis", "Sch√∂nes Design", "√úberzeugt mich",
            "Richtig nice", "Voll gut", "Echt cool", "Gef√§llt mir sehr"
        ],
        3: [
            "Ganz okay", "Erf√ºllt seinen Zweck", "Im Gro√üen und Ganzen zufrieden", "Mittelm√§√üig",
            "Entspricht den Erwartungen", "Nicht schlecht", "K√∂nnte besser sein", "Durchschnittlich",
            "F√ºr den Preis in Ordnung", "Brauchbar", "Mittelklasse", "Okay f√ºr den Alltag",
            "Ganz nett", "Passt schon"
        ],
    },
    "en": {
        5: [
            "Absolutely amazing!", "Perfect product!", "Love it so much!", "Exceeds all expectations!",
            "Simply wonderful!", "A must-have!", "Highly recommend!", "Best product ever!",
            "First-class quality!", "Love it!", "Top product!", "Excellent choice!",
            "Obsessed with this!", "Literally perfect!", "Totally in love!", "So freaking good!"
        ],
        4: [
            "Very good product", "Almost perfect", "Really nice", "Very satisfied",
            "Good quality", "Makes a great impression", "Recommendable", "Positively surprised",
            "Great purchase", "Good value for money", "Beautiful design", "Convincing",
            "Really cool", "Pretty nice", "Very pleased with it", "Quite good"
        ],
        3: [
            "Decent", "Serves its purpose", "Satisfied overall", "Average",
            "Meets expectations", "Not bad", "Could be better", "Average",
            "Okay for the price", "Usable", "Middle-range", "Okay for everyday",
            "Pretty decent", "It's fine"
        ],
    },
    "pl": {
        5: [
            "Absolutnie fantastyczny!", "Idealny produkt!", "Kocham to!", "Przekracza wszystkie oczekiwania!",
            "Po prostu cudowny!", "Trzeba mieƒá!", "Polecam!", "Najlepszy produkt!",
            "Pierwszorzƒôdna jako≈õƒá!", "Uwielbiam!", "Wspania≈Çy wyb√≥r!", "Super rzecz!"
        ],
        4: [
            "Bardzo dobry produkt", "Prawie idealny", "Naprawdƒô ≈Çadny", "Bardzo zadowolony",
            "Dobra jako≈õƒá", "Robi dobre wra≈ºenie", "Godny polecenia", "Pozytywnie zaskoczony",
            "≈öwietny zakup", "Dobra warto≈õƒá", "Piƒôkny design"
        ],
        3: [
            "W porzƒÖdku", "Spe≈Çnia swoje zadanie", "Og√≥lnie zadowolony", "Przeciƒôtny",
            "Spe≈Çnia oczekiwania", "Niez≈Çy", "M√≥g≈Çby byƒá lepszy"
        ],
    },
    "ru": {
        5: [
            "–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!", "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!", "–û–±–æ–∂–∞—é —ç—Ç–æ!", "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è!",
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!", "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å!", "–û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!", "–õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç!",
            "–ü–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ!", "–õ—é–±–ª—é —ç—Ç–æ!", "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!"
        ],
        4: [
            "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∞—Å–∏–≤–æ", "–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω",
            "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ—Ç–ª–∏—á–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥—É—é", "–ü—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–ª–µ–Ω",
            "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞", "–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞"
        ],
        3: [
            "–ù–µ–ø–ª–æ—Ö–æ", "–°–ª—É–∂–∏—Ç —Å–≤–æ–µ–π —Ü–µ–ª–∏", "–í —Ü–µ–ª–æ–º –¥–æ–≤–æ–ª–µ–Ω", "–°—Ä–µ–¥–Ω–∏–π",
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º", "–ù–µ–ø–ª–æ—Ö–æ", "–ú–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ"
        ],
    }
}

# Variablen f√ºr Shop-Bezug, Social Media und mehr
shop_references = {
    "de": [
        "Fuga Studios rockt einfach", "wieder mal bei Fuga zugeschlagen", "meine dritte Bestellung bei Fuga",
        "Fuga nie entt√§uscht", "Fuga Studios ist mein go-to shop", "f√ºr Festival-Outfits ist Fuga unschlagbar",
        "Fuga kennt einfach den vibe", "Fuga versteht alternative fashion", "seit ich Fuga entdeckt hab kauf ich nix anderes mehr"
    ],
    "en": [
        "Fuga Studios rocks", "hit up Fuga again", "my third Fuga haul",
        "Fuga never disappoints", "Fuga Studios is my go-to", "for festival fits Fuga is unmatched",
        "Fuga just gets the vibe", "Fuga understands alt fashion", "since finding Fuga I don't shop anywhere else"
    ],
    "pl": [
        "Fuga Studios nigdy nie zawodzi", "kolejne zam√≥wienie z Fuga", "Fuga rozumie alternatywnƒÖ modƒô"
    ],
    "ru": [
        "Fuga Studios –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤—ã–≤–∞–µ—Ç", "–æ—á–µ—Ä–µ–¥–Ω–æ–π –∑–∞–∫–∞–∑ –∏–∑ Fuga", "Fuga –ø–æ–Ω–∏–º–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥—É"
    ]
}

social_media_refs = {
    "de": [
        "hab's auf TikTok gesehen und sofort bestellt", "nach dem Insta Post musste ich es haben", 
        "auf TikTok viral gegangen und verst√§ndlich warum", "alle meine Freunde auf Insta fragen wo es her ist",
        "perfekt f√ºr meine aesthetic auf Insta", "war auf meiner wishlist seit dem TikTok von @", 
        "hab's im Fuga lookbook gesehen und sofort verliebt", "tiktok made me buy it - no regrets"
    ],
    "en": [
        "saw it on TikTok and ordered instantly", "had to cop after that Insta post", 
        "went viral on TikTok for a reason", "all my friends on Insta asking where it's from",
        "perfect for my Insta aesthetic", "been on my wishlist since @'s TikTok", 
        "saw it in Fuga's lookbook and fell in love", "tiktok made me buy it - zero regrets"
    ],
    "pl": [
        "zobaczy≈Çam na TikToku i od razu zam√≥wi≈Çam", "idealne do zdjƒôƒá na Instagram"
    ],
    "ru": [
        "—É–≤–∏–¥–µ–ª–∞ –≤ –¢–∏–∫–¢–æ–∫–µ –∏ —Å—Ä–∞–∑—É –∑–∞–∫–∞–∑–∞–ª–∞", "–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º"
    ]
}

shipping_comments = {
    "de": [
        "Versand war schneller als erwartet", "Paket kam in nur 2 Tagen an - nice",
        "Verpackung war cute af", "Lieferung war mega schnell", 
        "Versand hat etwas gedauert aber war's wert", "kam p√ºnktlich zum Festival an - danke!!!", 
        "Bestellung problemlos, n√§chstes mal bitte schnellerer Versand", "Bestellung kam mit s√º√üer Notiz"
    ],
    "en": [
        "shipping was faster than expected", "package arrived in just 2 days - nice",
        "packaging was cute af", "delivery was super quick", 
        "shipping took a bit but so worth it", "arrived just in time for the festival - thanks!!!", 
        "ordering was easy, hope shipping is faster next time", "order came with a cute note"
    ],
    "pl": [
        "dostawa by≈Ça szybsza ni≈º siƒô spodziewa≈Çam", "przesy≈Çka dotar≈Ça w zaledwie 2 dni"
    ],
    "ru": [
        "–¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å", "–ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏—à–ª–∞ –≤—Å–µ–≥–æ –∑–∞ 2 –¥–Ω—è"
    ]
}

# Kurze Review-Varianten (f√ºr authentische Ein-Satz-Reviews)
short_reviews = {
    "de": [
        "krass gut!!!", "omg, neues lieblingsst√ºcküíñ", "hab sofort zugeschlagen!!!", "vibes sind immaculate‚ú®", "style ist brutal", 
        "10/10 w√ºrd nochmal kaufen", "F√ºr parties perfekt!!", "hab schon 5 komplimente bekommen lol", "Mega fit check material",
        "aesthetic af", "obssessed damit!!!!", "Liebe das design sm", "straight fire üî•üî•üî•", "fashion slay fr", 
        "direkt ausgegangen damit", "sieht 100x besser aus als auf insta", "fuga studios killt es wieder mal", "gibts in jeder farbe?",
        "shipping war flott", "insta feed material", "outfit mit diesem teil = iconic", "hatte fomo, aber jetz ist meins!",
        "kann nicht aufh√∂ren es zu tragen tbh", "so in love mit dem style", "muss es in allen farben haben lmaoo", "hab von fuga auf tiktok geh√∂rt"
    ],
    "en": [
        "obsessed!!!!", "new fav piece no cap", "copped instantlyüî•", "the vibes are immaculate‚ú®", "straight fire fit", 
        "10/10 would cop again", "perfect for partying!!", "got 5 compliments already lmao", "major fit check material",
        "aesthetic af", "literally can't take it off", "lowkey love this sm", "absolutely slayed", "fashion served frfr", 
        "went out in it right away", "looks 100x better irl", "fuga studios killing it again", "need this in every color",
        "shipping was quick", "literally my insta feed aesthetic", "outfit w this = iconic", "had fomo but now it's mine!",
        "can't stop wearing this tbh", "so in love w the style", "gotta have it in all colors lol", "saw fuga on tiktok and had to buy"
    ],
    "pl": [
        "totalnie zakochana!!!", "natychmiast kupi≈Çam!", "wyglƒÖda lepiej ni≈º na zdjƒôciach", "obsesja kompletna!!!", 
        "idealne do klubu", "fuga studios zawsze daje radƒô", "przesy≈Çka super szybka", "muszƒô mieƒá wiƒôcej takich rzeczy", 
        "pasuje do wszystkiego", "komplimenty murowane", "obserwujƒô fuga na insta i w ko≈Ñcu kupi≈Çam", "estetyka 10/10",
        "wyr√≥≈ºniam siƒô w tym totalnie", "nie mogƒô siƒô doczekaƒá kolejnej imprezy"
    ],
    "ru": [
        "–ø—Ä–æ—Å—Ç–æ –æ–¥–µ—Ä–∂–∏–º–∞!!!", "—Å—Ä–∞–∑—É –∫—É–ø–∏–ª–∞!", "–≤—ã–≥–ª—è–¥–∏—Ç –ª—É—á—à–µ —á–µ–º –Ω–∞ —Ñ–æ—Ç–æ", "–ø–æ–ª–Ω–∞—è –æ–±—Å–µ—Å—Å–∏—è!!!", 
        "–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∫–ª—É–±–∞", "fuga studios –≤—Å–µ–≥–¥–∞ —Ç–æ–ø", "–¥–æ—Å—Ç–∞–≤–∫–∞ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–∞—è", "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö –≤–µ—â–µ–π", 
        "—Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å–æ –≤—Å–µ–º", "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã", "—Å–ª–µ–∂—É –∑–∞ fuga –≤ –∏–Ω—Å—Ç–µ –∏ –Ω–∞–∫–æ–Ω–µ—Ü –∫—É–ø–∏–ª–∞", "—ç—Å—Ç–µ—Ç–∏–∫–∞ 10/10",
        "–≤—ã–¥–µ–ª—è—é—Å—å –≤ —ç—Ç–æ–º", "–Ω–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏"
    ]
}

# Variationen f√ºr das Review-Ende nach Sprache
review_endings = {
    "de": {
        5: [
            "Absolut empfehlenswert!", 
            "Werde definitiv wieder bestellen!", 
            "Eines meiner Lieblingsteile!",
            "Bin rundum zufrieden!",
            "Klare Kaufempfehlung!",
            "Ein absolutes Lieblingsteil in meinem Kleiderschrank!",
            "W√ºrde es sofort wieder kaufen!"
        ],
        4: [
            "Kann ich empfehlen.", 
            "Bin sehr zufrieden mit dem Kauf.", 
            "Ein guter Kauf.",
            "W√ºrde ich wieder kaufen.",
            "Macht einen wertigen Eindruck.",
            "Bin zufrieden mit meiner Wahl.",
            "Erf√ºllt meinen Zweck gut."
        ],
        3: [
            "Ist okay f√ºr den Preis.", 
            "Erf√ºllt seinen Zweck.", 
            "Nicht perfekt, aber brauchbar.",
            "K√∂nnte in einigen Punkten besser sein.",
            "F√ºr gelegentliches Tragen in Ordnung.",
            "Weder besonders gut noch schlecht.",
            "Bin weder begeistert noch entt√§uscht."
        ]
    },
    "en": {
        5: [
            "Highly recommended!", 
            "Will definitely order again!", 
            "One of my favorites!",
            "Completely satisfied!",
            "Clear buy recommendation!",
            "An absolute favorite in my wardrobe!",
            "Would buy it again in a heartbeat!"
        ],
        4: [
            "Can recommend.", 
            "Very satisfied with the purchase.", 
            "A good buy.",
            "Would buy again.",
            "Makes a quality impression.",
            "Satisfied with my choice.",
            "Serves my purpose well."
        ],
        3: [
            "It's okay for the price.", 
            "Serves its purpose.", 
            "Not perfect, but usable.",
            "Could be better in some areas.",
            "Okay for occasional wear.",
            "Neither particularly good nor bad.",
            "Neither thrilled nor disappointed."
        ]
    },
    "pl": {
        5: [
            "GorƒÖco polecam!", 
            "Na pewno zam√≥wiƒô ponownie!", 
            "Jedno z moich ulubionych!",
            "Ca≈Çkowicie zadowolony!",
            "Zdecydowanie warto kupiƒá!",
            "Absolutny faworyt w mojej garderobie!",
            "Kupi≈Çbym to ponownie bez wahania!"
        ],
        4: [
            "Mogƒô poleciƒá.", 
            "Bardzo zadowolony z zakupu.", 
            "Dobry zakup.",
            "Kupi≈Çbym ponownie.",
            "Sprawia wra≈ºenie jako≈õciowego.",
            "Zadowolony z mojego wyboru.",
            "Dobrze spe≈Çnia swoje zadanie."
        ],
        3: [
            "W porzƒÖdku za tƒô cenƒô.", 
            "Spe≈Çnia swoje zadanie.", 
            "Nie idealne, ale u≈ºywalne.",
            "Mog≈Çoby byƒá lepsze w niekt√≥rych aspektach.",
            "W porzƒÖdku do okazjonalnego noszenia.",
            "Ani szczeg√≥lnie dobre, ani z≈Çe.",
            "Ani zachwycony, ani rozczarowany."
        ]
    },
    "ru": {
        5: [
            "–û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!", 
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–∂—É —Å–Ω–æ–≤–∞!", 
            "–û–¥–Ω–∞ –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –≤–µ—â–µ–π!",
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω!",
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—Ç–æ–∏—Ç –∫—É–ø–∏—Ç—å!",
            "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç –≤ –º–æ–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ!",
            "–ö—É–ø–∏–ª –±—ã —ç—Ç–æ —Å–Ω–æ–≤–∞ –Ω–µ —Ä–∞–∑–¥—É–º—ã–≤–∞—è!"
        ],
        4: [
            "–ú–æ–≥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å.", 
            "–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π.", 
            "–•–æ—Ä–æ—à–∞—è –ø–æ–∫—É–ø–∫–∞.",
            "–ö—É–ø–∏–ª –±—ã —Å–Ω–æ–≤–∞.",
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.",
            "–î–æ–≤–æ–ª–µ–Ω —Å–≤–æ–∏–º –≤—ã–±–æ—Ä–æ–º.",
            "–•–æ—Ä–æ—à–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é."
        ],
        3: [
            "–ù–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞ —ç—Ç—É —Ü–µ–Ω—É.", 
            "–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é –∑–∞–¥–∞—á—É.", 
            "–ù–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –ø—Ä–∏–≥–æ–¥–Ω–æ.",
            "–ú–æ–≥–ª–æ –±—ã –±—ã—Ç—å –ª—É—á—à–µ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö.",
            "–ù–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –Ω–æ—Å–∫–∏.",
            "–ù–∏ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ, –Ω–∏ –ø–ª–æ—Ö–æ.",
            "–ù–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ, –Ω–∏ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω."
        ]
    }
}

# Phrasen f√ºr verschiedene Produkttypen und Eigenschaften nach Sprache
product_phrases = {
    "de": {
        "tops": [
            "passt zu literally allem in meinem closet", 
            "schnitt ist ultra flattering", 
            "material f√ºhlt sich besser an als erwartet",
            "qualit√§t ist besser als die teuren mainstream marken",
            "farbe ist noch geiler irl",
            "verarbeitung on point",
            "bekomme nonstop komplimente",
            "style ist sooo mein vibe",
            "hab direkt outfit pics gepostet",
            "tr√§gt sich mega angenehm",
            "fabric ist so soft aber trotzdem nicht d√ºnn",
            "detail am ausschnitt ist so unique",
            "kann man dressed up oder casual stylen"
        ],
        "bottoms": [
            "sitzt wie eine zweite haut", 
            "legit der comfyste shit ever", 
            "l√§nge ist perfekt f√ºr meine gr√∂√üe",
            "stretch game ist on point",
            "die taschen sind tief genug f√ºr handy!!",
            "im club super bequem",
            "hab schon 3x getragen diese woche lol"
        ],
        "dresses": [
            "sitzt besser als alle dresses die ich hab", 
            "cutouts sind strategisch an den richtigen stellen", 
            "perfekt f√ºrs date oder club",
            "der stoff f√§llt einfach anders",
            "die details am r√ºcken sind alles",
            "l√§nge ist sexy ohne too much",
            "feel mich wie main character energy darin"
        ],
        "accessories": [
            "elevates literally jeden basic look", 
            "qualit√§t k√∂nnte locker das dreifache kosten", 
            "meine friends sind alle neidisch",
            "passt zu jedem outfit vibe",
            "design ist edgy aber trotzdem wearable",
            "gr√∂√üe ist perfekt adjustable",
            "komplettes statement piece"
        ],
        "outerwear": [
            "warm aber nicht bulky", 
            "silhouette ist perfekt oversized", 
            "details sind nicht basic",
            "layering game changer",
            "regentauglich getestet lol",
            "pockets sind tief genug f√ºr alles",
            "robust aber trotzdem fashion"
        ],
        "gothic": [
            "d√ºsterer vibe ohne cosplay zu wirken", 
            "edgy aber trotzdem alltagstauglich", 
            "perfekt f√ºr meine dark academia aesthetic",
            "f√ºr festivals und clubs erste wahl",
            "details sind wirklich unique",
            "statement piece f√ºr jeden goth look",
            "harmoniert mit meinen platforms"
        ],
        "punk": [
            "hardcore punk vibes ohne try hard", 
            "rebellious energy aber trotzdem tragbar", 
            "outfit-maker piece",
            "perfekt f√ºr konzerte und moshpits",
            "details geben dem ganzen den edge",
            "mein go-to f√ºr jedes punk event",
            "passt zu meinen docs und ketten"
        ],
        "vintage": [
            "y2k aesthetic ist on point", 
            "hat den perfekten retro vibe ohne costume zu sein", 
            "old school cool mit modernem fit",
            "nostalgic details mit zeitgem√§√üem schnitt",
            "zeitlos aber irgendwie auch current",
            "vintage inspired ohne outdated zu wirken",
            "hat den 90s vibe den ich gesucht hab"
        ]
    },
    "en": {
        "tops": [
            "goes with literally everything in my closet", 
            "cut is ultra flattering", 
            "material feels way better than expected",
            "quality beats the expensive mainstream brands",
            "color is even better irl",
            "construction is on point",
            "getting nonstop compliments",
            "style is sooo my vibe",
            "posted outfit pics right away",
            "wears so comfortably",
            "fabric is soft but not thin",
            "neckline detail is so unique",
            "can be styled dressed up or casual",
            "just the right amount of crop",
            "sleeves hit at the perfect spot",
            "makes my waist look snatched",
            "breathable even at crowded parties",
            "tempted to sleep in it lol"
        ],
        "bottoms": [
            "fits like a second skin", 
            "legit the comfiest thing ever", 
            "length is perfect for my height",
            "stretch game is on point",
            "pockets are actually deep enough for phone!!",
            "so comfy in the club",
            "already worn it 3x this week lol",
            "makes my legs look so good",
            "waistband doesn't roll down when dancing",
            "hugs all the right places",
            "durable for festival season",
            "the slit is perfectly placed"
        ],
        "dresses": [
            "fits better than any dress i own", 
            "cutouts are strategically in the right places", 
            "perfect for date night or clubbing",
            "the fabric just hits different",
            "the back details are everything",
            "length is sexy without being too much",
            "feel like main character energy in it",
            "so many ways to style it",
            "flattering for every body type",
            "the drape is immaculate",
            "makes me feel unstoppable",
            "easy to dance in all night"
        ],
        "accessories": [
            "elevates literally any basic look", 
            "quality could easily cost triple", 
            "all my friends are jealous",
            "matches every outfit vibe",
            "design is edgy but still wearable",
            "size is perfectly adjustable",
            "complete statement piece",
            "turns heads every time",
            "durable enough for everyday",
            "gives that expensive look",
            "unique without trying too hard",
            "feels lightweight but substantial"
        ],
        "outerwear": [
            "warm without being bulky", 
            "silhouette is perfectly oversized", 
            "details are not basic",
            "layering game changer",
            "rain-tested lol",
            "pockets deep enough for everything",
            "sturdy but still fashion",
            "transitions from day to night",
            "looks expensive af",
            "stands out in the best way",
            "hood actually stays up",
            "perfect weight for unpredictable weather"
        ],
        "gothic": [
            "dark vibes without looking costumey", 
            "edgy but still wearable daily", 
            "perfect for my dark academia aesthetic",
            "first choice for festivals and clubs",
            "details are genuinely unique",
            "statement piece for any goth look",
            "pairs perfectly with my platforms",
            "gives that effortless alt vibe",
            "gothic without being tryhard",
            "witchy energy in the best way",
            "elevated goth that works anywhere",
            "works for both daytime and nightlife"
        ],
        "punk": [
            "hardcore punk vibes without trying too hard", 
            "rebellious energy but still wearable", 
            "outfit-maker piece",
            "perfect for concerts and moshpits",
            "details give it the edge",
            "my go-to for any punk event",
            "goes with my docs and chains",
            "functional for the pit",
            "punk aesthetic that's actually comfortable",
            "authentic without looking like a costume",
            "stands up to rowdy shows",
            "distressing is done just right"
        ],
        "vintage": [
            "y2k aesthetic is spot on", 
            "perfect retro vibe without looking costumey", 
            "old school cool with modern fit",
            "nostalgic details with contemporary cut",
            "timeless but somehow current",
            "vintage inspired without being outdated",
            "has the 90s vibe i've been searching for",
            "childhood fashion dreams come true",
            "early 2000s energy without the cringe",
            "retro silhouette that still feels fresh",
            "nostalgic in all the right ways",
            "makes me feel like i'm in my favorite old movie"
        ]
    },
    "pl": {
        "tops": [
            "pasuje do ca≈Çej mojej szafy", 
            "kr√≥j jest mega pochlebny", 
            "materia≈Ç lepszy ni≈º siƒô spodziewa≈Çam",
            "jako≈õƒá lepsza ni≈º drogie sieci√≥wki",
            "kolor ≈ºywszy na ≈ºywo",
            "wykonanie perfekcyjne",
            "ciƒÖgle dostajƒô komplementy",
            "styl totalnie w moim klimacie",
            "od razu wrzuci≈Çam zdjƒôcia na insta",
            "nosi siƒô bardzo wygodnie",
            "materia≈Ç miƒôkki ale nie prze≈õwituje",
            "detal przy dekolcie super oryginalny"
        ],
        "bottoms": [
            "le≈ºy jak druga sk√≥ra", 
            "najwygodniejsza rzecz ever", 
            "d≈Çugo≈õƒá idealna do mojego wzrostu",
            "elastyczno≈õƒá na wysokim poziomie",
            "kieszenie wystarczajƒÖco g≈Çƒôbokie na telefon!!",
            "komfortowe nawet w klubie",
            "nosi≈Çam ju≈º 3x w tym tygodniu lol"
        ],
        "dresses": [
            "le≈ºy lepiej ni≈º wszystkie moje sukienki", 
            "wyciƒôcia strategicznie w dobrych miejscach", 
            "idealna na randkƒô lub do klubu",
            "materia≈Ç po prostu inny",
            "detale z ty≈Çu sƒÖ wszystkim",
            "d≈Çugo≈õƒá seksowna ale nie przesadzona",
            "czujƒô siƒô jak g≈Ç√≥wna bohaterka"
        ],
        "accessories": [
            "podnosi ka≈ºdƒÖ stylizacjƒô", 
            "jako≈õƒá mog≈Çaby kosztowaƒá trzy razy wiƒôcej", 
            "wszyscy znajomi zazdroszczƒÖ",
            "pasuje do ka≈ºdego klimatu",
            "design oryginalny ale noszalny",
            "rozmiar idealnie regulowany",
            "ca≈Çkowicie wyr√≥≈ºniajƒÖcy element"
        ],
        "gothic": [
            "mroczny klimat bez efektu przebrania", 
            "ostre ale nadal noszalne na co dzie≈Ñ", 
            "idealne do mojej dark academia estetyki",
            "pierwszy wyb√≥r na festiwale i do klub√≥w",
            "detale naprawdƒô oryginalne",
            "kluczowy element ka≈ºdej gotyciej stylizacji",
            "idealnie pasuje do moich platform√≥w"
        ]
    },
    "ru": {
        "tops": [
            "—Å–æ—á–µ—Ç–∞–µ—Ç—Å—è –±—É–∫–≤–∞–ª—å–Ω–æ —Å–æ –≤—Å–µ–º –≤ –º–æ–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ", 
            "–∫—Ä–æ–π –æ—á–µ–Ω—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π", 
            "–º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å",
            "–∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –¥–æ—Ä–æ–≥–∏–µ –±—Ä–µ–Ω–¥—ã",
            "—Ü–≤–µ—Ç –µ—â–µ –ª—É—á—à–µ –≤–∂–∏–≤—É—é",
            "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–µ",
            "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ª—É—á–∞—é –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã",
            "—Å—Ç–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–µ–º—É –≤–∞–π–±—É",
            "—Å—Ä–∞–∑—É –∂–µ –≤—ã–ª–æ–∂–∏–ª–∞ —Ñ–æ—Ç–æ –≤ –æ–±—Ä–∞–∑–µ",
            "–Ω–æ—Å–∏—Ç—Å—è –æ—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ",
            "—Ç–∫–∞–Ω—å –º—è–≥–∫–∞—è, –Ω–æ –Ω–µ –ø—Ä–æ—Å–≤–µ—á–∏–≤–∞–µ—Ç",
            "–¥–µ—Ç–∞–ª—å —É –≤—ã—Ä–µ–∑–∞ –æ—á–µ–Ω—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è"
        ],
        "bottoms": [
            "—Å–∏–¥–∏—Ç –∫–∞–∫ –≤—Ç–æ—Ä–∞—è –∫–æ–∂–∞", 
            "–±—É–∫–≤–∞–ª—å–Ω–æ —Å–∞–º–∞—è —É–¥–æ–±–Ω–∞—è –≤–µ—â—å", 
            "–¥–ª–∏–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è –º–æ–µ–≥–æ —Ä–æ—Å—Ç–∞",
            "—Ç—è–Ω–µ—Ç—Å—è –∏–¥–µ–∞–ª—å–Ω–æ",
            "–∫–∞—Ä–º–∞–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–∏–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞!!",
            "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–∞–∂–µ –≤ –∫–ª—É–±–µ",
            "—É–∂–µ –Ω–∞–¥–µ–ª–∞ 3 —Ä–∞–∑–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ª–æ–ª"
        ],
        "dresses": [
            "—Å–∏–¥–∏—Ç –ª—É—á—à–µ –ª—é–±–æ–≥–æ –ø–ª–∞—Ç—å—è, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å", 
            "–≤—ã—Ä–µ–∑—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö", 
            "–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –∏–ª–∏ –∫–ª—É–±–∞",
            "—Ç–∫–∞–Ω—å –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–≥–æ–≥–æ —É—Ä–æ–≤–Ω—è",
            "–¥–µ—Ç–∞–ª–∏ –Ω–∞ —Å–ø–∏–Ω–µ - —ç—Ç–æ –≤—Å—ë",
            "–¥–ª–∏–Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º",
            "—á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –≥–ª–∞–≤–Ω–æ–π –≥–µ—Ä–æ–∏–Ω–µ–π –≤ –Ω–µ–º",
            "—Å—Ç–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å",
            "–≤—ã–≥–ª—è–¥–∏—Ç flattering –Ω–∞ –ª—é–±–æ–π —Ñ–∏–≥—É—Ä–µ",
            "–¥—Ä–∞–ø–∏—Ä–æ–≤–∫–∞ –±–µ–∑—É–ø—Ä–µ—á–Ω–∞—è",
            "–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –Ω–µ–æ—Å—Ç–∞–Ω–æ–≤–∏–º–æ–π",
            "–ª–µ–≥–∫–æ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –≤—Å—é –Ω–æ—á—å"
        ],
        "gothic": [
            "—Ç–µ–º–Ω—ã–π –≤–∞–π–± –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–æ—Å—Ç—é–º–∞", 
            "edge –Ω–æ –º–æ–∂–Ω–æ –Ω–æ—Å–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", 
            "–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –º–æ–µ–π dark academia —ç—Å—Ç–µ—Ç–∏–∫–∏",
            "–ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π –∏ –∫–ª—É–±–æ–≤",
            "–¥–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ",
            "statement piece –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ç –æ–±—Ä–∞–∑–∞",
            "–∏–¥–µ–∞–ª—å–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –º–æ–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"
        ]
    }
}

def clean_html(raw_html):
    """Entfernt HTML-Tags aus Text"""
    cleanr = re.compile('<.*?>')
    cleantext = re.sub(cleanr, '', raw_html)
    return cleantext

def get_simplified_product_name(product_title, language="en"):
    """Extrahiert einen nat√ºrlicheren, k√ºrzeren Produktnamen aus dem vollst√§ndigen Titel"""
    if not product_title:
        return "piece" if language == "en" else "Teil" if language == "de" else "produkt" if language == "pl" else "–≤–µ—â—å"
        
    # Wenn der Titel kurz ist (< 15 Zeichen), kann er komplett verwendet werden
    if len(product_title) < 15:
        return product_title
        
    words = product_title.split()
    
    # Einfachste M√∂glichkeit: Nur das letzte Wort verwenden, wenn es ein Kleidungsst√ºck ist
    clothing_terms = {
        "en": ["pants", "top", "shirt", "dress", "skirt", "jacket", "coat", "sweater", "hoodie", "cardigan", "jeans", "leggings", "shorts", "set", "bra", "corset", "gown", "jumpsuit", "bodysuit", "tee", "tank", "sweatshirt", "jumper", "blouse", "vest", "suit", "bikini", "swimsuit", "robe", "kimono", "crop", "hat", "cap"],
        "de": ["hose", "top", "shirt", "kleid", "rock", "jacke", "mantel", "pullover", "hoodie", "strickjacke", "jeans", "leggings", "shorts", "set", "bh", "korsett", "abendkleid", "jumpsuit", "bodysuit", "t-shirt", "tanktop", "sweatshirt", "pulli", "bluse", "weste", "anzug", "bikini", "badeanzug", "bademantel", "kimono", "croptop", "hut", "m√ºtze"],
        "pl": ["spodnie", "top", "koszula", "sukienka", "sp√≥dnica", "kurtka", "p≈Çaszcz", "sweter", "bluza", "kardigan", "d≈ºinsy", "leginsy", "szorty", "zestaw", "biustonosz", "gorset", "suknia", "kombinezon", "body", "koszulka", "top", "bluza", "sweter", "bluzka", "kamizelka", "garnitur", "bikini", "str√≥j kƒÖpielowy", "szlafrok", "kimono", "crop", "kapelusz", "czapka"],
        "ru": ["–±—Ä—é–∫–∏", "—Ç–æ–ø", "—Ä—É–±–∞—à–∫–∞", "–ø–ª–∞—Ç—å–µ", "—é–±–∫–∞", "–∫—É—Ä—Ç–∫–∞", "–ø–∞–ª—å—Ç–æ", "—Å–≤–∏—Ç–µ—Ä", "—Ö—É–¥–∏", "–∫–∞—Ä–¥–∏–≥–∞–Ω", "–¥–∂–∏–Ω—Å—ã", "–ª–µ–≥–≥–∏–Ω—Å—ã", "—à–æ—Ä—Ç—ã", "–∫–æ–º–ø–ª–µ–∫—Ç", "–±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä", "–∫–æ—Ä—Å–µ—Ç", "–ø–ª–∞—Ç—å–µ", "–∫–æ–º–±–∏–Ω–µ–∑–æ–Ω", "–±–æ–¥–∏", "—Ñ—É—Ç–±–æ–ª–∫–∞", "–º–∞–π–∫–∞", "—Å–≤–∏—Ç—à–æ—Ç", "—Å–≤–∏—Ç–µ—Ä", "–±–ª—É–∑–∫–∞", "–∂–∏–ª–µ—Ç", "–∫–æ—Å—Ç—é–º", "–±–∏–∫–∏–Ω–∏", "–∫—É–ø–∞–ª—å–Ω–∏–∫", "—Ö–∞–ª–∞—Ç", "–∫–∏–º–æ–Ω–æ", "–∫—Ä–æ–ø", "—à–ª—è–ø–∞", "–∫–µ–ø–∫–∞"]
    }
    
    # Fallback auf Englisch, wenn die Sprache nicht unterst√ºtzt wird
    terms = clothing_terms.get(language, clothing_terms["en"])
    
    # Schaue, ob das letzte Wort ein Kleidungsst√ºck ist
    last_word_lower = words[-1].lower()
    if last_word_lower in terms:
        # Wenn ja, nutze das letzte Wort in seinem Original-Case
        return words[-1]
        
    # Alternative: Schau nach einem Kleidungsst√ºck im gesamten Titel
    for word in words:
        if word.lower() in terms:
            return word
    
    # Wenn "Opium" im Namen ist (typisch f√ºr diese Marke), nutze das generische Kleidungsst√ºck
    # basierend auf den Kategorien und der Sprache
    if "opium" in product_title.lower() or "Opium" in product_title:
        categories = []
        text = product_title.lower()
        for category in ["top", "pants", "dress", "skirt", "jacket", "coat", "cardigan"]:
            if category in text:
                categories.append(category)
        
        if categories:
            if language == "de":
                translation = {"top": "top", "pants": "hose", "dress": "kleid", "skirt": "rock", 
                              "jacket": "jacke", "coat": "mantel", "cardigan": "strickjacke"}
                return translation.get(categories[0], "Teil")
            elif language == "pl":
                translation = {"top": "top", "pants": "spodnie", "dress": "sukienka", "skirt": "sp√≥dnica", 
                              "jacket": "kurtka", "coat": "p≈Çaszcz", "cardigan": "kardigan"}
                return translation.get(categories[0], "rzecz")
            elif language == "ru":
                translation = {"top": "—Ç–æ–ø", "pants": "–±—Ä—é–∫–∏", "dress": "–ø–ª–∞—Ç—å–µ", "skirt": "—é–±–∫–∞", 
                              "jacket": "–∫—É—Ä—Ç–∫–∞", "coat": "–ø–∞–ª—å—Ç–æ", "cardigan": "–∫–∞—Ä–¥–∏–≥–∞–Ω"}
                return translation.get(categories[0], "–≤–µ—â—å")
            else:
                return categories[0]
        
        # Wenn es ein Opium-Produkt ist, aber keine bestimmte Kategorie erkannt wurde,
        # verwende nur "Opium"
        return "Opium"
    
    # Fallback 1: Gib nur die letzten 1-2 W√∂rter zur√ºck (typisch f√ºr Produktnamen)
    if len(words) >= 3:
        return f"{words[-2]} {words[-1]}"
    elif len(words) == 2:
        return words[-1]
    
    # Fallback 2: Gib den generischen Begriff je nach Sprache zur√ºck
    generic_terms = {
        "de": "Teil",
        "en": "piece",
        "pl": "rzecz",
        "ru": "–≤–µ—â—å"
    }
    
    return generic_terms.get(language, "piece")

def get_product_category(product_info):
    """Bestimmt die Produktkategorie basierend auf Titel, Typ, Tags oder Beschreibung"""
    categories = []
    
    keywords = {
        'tops': ['top', 'shirt', 'bluse', 'tshirt', 't-shirt', 'pullover', 'sweatshirt', 'hoodie', 'tanktop'],
        'bottoms': ['hose', 'jeans', 'leggings', 'rock', 'shorts', 'skirt', 'pants'],
        'dresses': ['kleid', 'dress'],
        'accessories': ['schmuck', 'kette', 'armband', 'ring', 'ohrring', 'tasche', 'bag', 'schal', 'm√ºtze', 'handschuhe'],
        'outerwear': ['jacke', 'mantel', 'coat', 'jacket', 'cardigan', 'weste', 'vest'],
        'gothic': ['gothic', 'dark', 'schwarz', 'black', 'mesh', 'spitze', 'lace', 'net'],
        'punk': ['punk', 'nieten', 'studs', 'leather', 'leder', 'tartan', 'plaid'],
        'vintage': ['vintage', 'retro', 'klassisch', 'classic']
    }
    
    text = (product_info.get('Title', '') + ' ' + 
            product_info.get('Type', '') + ' ' + 
            product_info.get('Tags', '') + ' ' + 
            clean_html(product_info.get('Body (HTML)', ''))).lower()
    
    for category, words in keywords.items():
        if any(word in text for word in words):
            categories.append(category)
    
    return categories if categories else ['tops']  # Default to 'tops' if no category detected

def select_language():
    """W√§hlt eine Sprache basierend auf der gew√ºnschten Verteilung aus"""
    # 30% Deutsch, 50% Englisch, 10% Polnisch, 10% Russisch
    languages = random.choices(["de", "en", "pl", "ru"], weights=[30, 50, 10, 10], k=1)[0]
    return languages

def generate_youthful_username():
    """Generiert trendige, jugendliche Benutzernamen f√ºr 18-24-J√§hrige"""
    first_parts = [
        "xX", "x", "", "", "", "", ""  # Leere Strings h√§ufiger f√ºr nat√ºrlichere Verteilung
    ]
    
    middle_parts = [
        "dark", "goth", "emo", "alt", "witch", "rebel", "astro", "moon", "night",
        "vibe", "style", "fashion", "trend", "aesthetic", "punk", "grunge", "death",
        "sad", "mood", "angel", "devil", "toxic", "retro", "vintage", "y2k", "fairy",
        "cyber", "digital", "glitch", "disco", "rave", "trap", "techno", "house", "indie",
        "core", "wave", "lilith", "mystic", "chaos", "neon", "cosmic", "dreamy", "void",
        "soul", "psycho", "doll", "baby", "kitty", "bunny", "honey", "cherry", "kiki",
        "crystal", "shadow", "demon", "grim", "doom", "hell", "heaven", "divine", "blessed",
        "cursed", "broken", "cool", "party", "slay", "queen", "king", "prince", "princess",
        "vapor", "haze", "cloud", "storm", "thunder", "rain", "sun", "moon", "star",
        "galaxy", "alien", "space", "planet", "mars", "venus", "saturn", "jupiter", "pluto"
    ]
    
    end_parts = [
        "Xx", "x", "xoxo", "", "", "", "",  # Leere Strings h√§ufiger f√ºr nat√ºrlichere Verteilung
        "_", ".", "__", "..", "_x", "x_", ".x", "x.", 
        "_xo", "_", ".", "", "", "", ""
    ]
    
    numbers = ["", "", "", ""]  # 50% Chance, keine Zahl zu haben
    for year in range(97, 6):  # Geburtsjahre f√ºr ca. 18-24-J√§hrige
        numbers.append(str(year))
    for i in range(1, 10):
        numbers.append(str(i))
    for i in range(10, 100):
        numbers.append(str(i))
    
    # Verschiedene Muster f√ºr Benutzernamen
    patterns = [
        lambda: f"{random.choice(middle_parts)}{random.choice(numbers)}{random.choice(end_parts)}",
        lambda: f"{random.choice(first_parts)}{random.choice(middle_parts)}{random.choice(end_parts)}",
        lambda: f"{random.choice(middle_parts)}_{random.choice(middle_parts)}{random.choice(numbers)}",
        lambda: f"{random.choice(middle_parts)}.{random.choice(middle_parts)}{random.choice(numbers)}",
        lambda: f"{random.choice(middle_parts)}{random.choice(numbers)}",
        lambda: f"{random.choice(first_parts)}{random.choice(middle_parts)}{random.choice(numbers)}{random.choice(end_parts)}"
    ]
    
    return random.choice(patterns)()

def generate_reviewer_info(language):
    """Generiert zuf√§llige Rezensenten-Informationen basierend auf der Sprache"""
    # 60% Chance f√ºr einen jugendlichen Benutzernamen statt eines "echten" Namens
    if random.random() < 0.6:
        reviewer_name = generate_youthful_username()
        
        # E-Mail basierend auf dem Benutzernamen generieren
        domains = ["gmail.com", "outlook.com", "icloud.com", "yahoo.com", "hotmail.com", 
                  "protonmail.com", "web.de", "gmx.de", "gmx.net", "live.com"]
        email = f"{reviewer_name.lower().replace(' ', '').replace('.', '_')}@{random.choice(domains)}"
    else:
        if language == "de":
            first_name = fake_de.first_name()
            last_initial = fake_de.last_name()[0]
            email = fake_de.email()
            location = random.choice(['DE', 'AT', 'CH'])
        elif language == "pl":
            first_name = fake_pl.first_name()
            last_initial = fake_pl.last_name()[0]
            email = fake_pl.email()
            location = 'PL'
        elif language == "ru":
            first_name = fake_ru.first_name()
            last_initial = fake_ru.last_name()[0]
            email = fake_ru.email()
            location = 'RU'
        else:  # English oder fallback
            first_name = fake_en.first_name()
            last_initial = fake_en.last_name()[0]
            email = fake_en.email()
            location = random.choice(['US', 'UK', 'CA', 'AU'])
        
        reviewer_name = f"{first_name} {last_initial}."
    
    # Location festlegen, wenn nicht bereits geschehen
    if 'location' not in locals():
        if language == "de":
            location = random.choice(['DE', 'AT', 'CH'])
        elif language == "pl":
            location = 'PL'
        elif language == "ru":
            location = 'RU'
        else:
            location = random.choice(['US', 'UK', 'CA', 'AU'])
    
    return reviewer_name, email, location

def generate_rating_distribution():
    """Generiert eine realistische Verteilung von Bewertungen (nur 3, 4 und 5 Sterne)"""
    # Gewichtete Verteilung: 5‚òÖ: 60%, 4‚òÖ: 30%, 3‚òÖ: 10%
    rating = random.choices([5, 4, 3], weights=[60, 30, 10], k=1)[0]
    return rating

def generate_review_content(product_info, rating, language):
    """Generiert einen passenden Review-Text basierend auf Produktinfo, Bewertung und Sprache"""
    categories = get_product_category(product_info)
    
    # Vereinfachten Produktnamen f√ºr nat√ºrlichere Reviews generieren
    simplified_name = get_simplified_product_name(product_info.get('Title', ''), language)
    
    # 15% Chance, einen leeren Kommentar zu haben (nur Bewertung ohne Text)
    if random.random() < 0.15:
        return ""
    
    # 35% Chance auf einen kurzen Ein-Satz-Review
    if random.random() < 0.35:
        if language in short_reviews:
            return random.choice(short_reviews[language])
        else:
            return random.choice(short_reviews["en"])  # Fallback auf Englisch
    
    # Einleitungss√§tze basierend auf der Bewertung und Sprache
    intros = {
        "de": {
            5: [
                f"obsessed mit diesem {simplified_name}!!!",
                f"hab das {simplified_name} direkt gecopt und zero regrets",
                f"omg dieser {simplified_name} ist literally perfection",
                f"brauchte ein {simplified_name} und hab jackpot gewonnen"
            ],
            4: [
                f"richtig nice {simplified_name}",
                f"hab das {simplified_name} endlich bekommen",
                f"das {simplified_name} ist echt cool",
                f"ziemlich happy mit dem {simplified_name}"
            ],
            3: [
                f"das {simplified_name} ist okay",
                f"{simplified_name} ist ganz nice",
                f"hab mir das {simplified_name} geg√∂nnt",
                f"das {simplified_name} erf√ºllt seinen zweck"
            ]
        },
        "en": {
            5: [
                f"obsessed with this {simplified_name}!!!",
                f"copped this {simplified_name} and zero regrets",
                f"omg this {simplified_name} is literally perfection",
                f"needed a {simplified_name} and hit the jackpot"
            ],
            4: [
                f"really nice {simplified_name}",
                f"finally got this {simplified_name}",
                f"this {simplified_name} is pretty cool",
                f"pretty happy with the {simplified_name}"
            ],
            3: [
                f"this {simplified_name} is okay",
                f"{simplified_name} is nice enough",
                f"treated myself to this {simplified_name}",
                f"this {simplified_name} does the job"
            ]
        },
        "pl": {
            5: [
                f"obsesja na punkcie tego {simplified_name}!!!",
                f"kupi≈Çam ten {simplified_name} i zero ≈ºalu",
                f"omg ten {simplified_name} to dos≈Çownie perfekcja",
                f"potrzebowa≈Çam {simplified_name} i trafi≈Çam idealnie"
            ],
            4: [
                f"naprawdƒô ≈Çadny {simplified_name}",
                f"w ko≈Ñcu mam ten {simplified_name}",
                f"ten {simplified_name} jest ca≈Çkiem fajny",
                f"ca≈Çkiem zadowolona z {simplified_name}"
            ],
            3: [
                f"ten {simplified_name} jest ok",
                f"{simplified_name} jest wystarczajƒÖco dobry",
                f"zrobi≈Çam sobie prezent w postaci {simplified_name}",
                f"ten {simplified_name} spe≈Çnia swoje zadanie"
            ]
        },
        "ru": {
            5: [
                f"–æ–¥–µ—Ä–∂–∏–º–∞ —ç—Ç–∏–º {simplified_name}!!!",
                f"–∫—É–ø–∏–ª–∞ —ç—Ç–æ—Ç {simplified_name} –∏ –Ω–∏ –æ —á–µ–º –Ω–µ –∂–∞–ª–µ—é",
                f"–æ–º–≥ —ç—Ç–æ—Ç {simplified_name} –±—É–∫–≤–∞–ª—å–Ω–æ –∏–¥–µ–∞–ª–µ–Ω",
                f"–Ω—É–∂–Ω–æ –±—ã–ª–æ {simplified_name} –∏ –ø–æ–ø–∞–ª–∞ –≤ —Ç–æ—á–∫—É"
            ],
            4: [
                f"–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∞—Å—Å–Ω—ã–π {simplified_name}",
                f"–Ω–∞–∫–æ–Ω–µ—Ü –ø–æ–ª—É—á–∏–ª–∞ —ç—Ç–æ—Ç {simplified_name}",
                f"—ç—Ç–æ—Ç {simplified_name} –¥–æ–≤–æ–ª—å–Ω–æ –∫—Ä—É—Ç–æ–π",
                f"–¥–æ–≤–æ–ª—å–Ω–∞ —ç—Ç–∏–º {simplified_name}"
            ],
            3: [
                f"—ç—Ç–æ—Ç {simplified_name} –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π",
                f"{simplified_name} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∏–π",
                f"–ø–æ–±–∞–ª–æ–≤–∞–ª–∞ —Å–µ–±—è —ç—Ç–∏–º {simplified_name}",
                f"—ç—Ç–æ—Ç {simplified_name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é –∑–∞–¥–∞—á—É"
            ]
        }
    }
    
    # Fallback auf Englisch, wenn die Sprache nicht verf√ºgbar ist
    if language not in intros:
        language_to_use = "en"
    else:
        language_to_use = language
    
    # Review-Komponenten sammeln
    review_components = []
    
    # Komponente 1: Intro hinzuf√ºgen (75% Chance)
    if random.random() < 0.75:
        review_components.append(random.choice(intros[language_to_use][rating]))
    
    # Komponente 2: Produkt-spezifische Phrasen (85% Chance)
    if random.random() < 0.85 and language in product_phrases:
        phrases = []
        for category in categories:
            if category in product_phrases[language]:
                phrases.extend(product_phrases[language][category])
        
        # Nur wenn Phrasen vorhanden sind
        if phrases:
            # 60% Chance f√ºr 1 Phrase, 30% Chance f√ºr 2, 10% Chance f√ºr 3
            phrase_chances = random.choices([1, 2, 3], weights=[60, 30, 10], k=1)[0]
            selected_phrases = random.sample(phrases, min(phrase_chances, len(phrases)))
            
            if selected_phrases:
                if len(review_components) > 0 and random.random() < 0.5:
                    # Mit Verbindungswort anh√§ngen
                    connectors = {
                        "de": [" und ", " - ", ", ", ". ", "! ", " btw ", " aber "],
                        "en": [" and ", " - ", ", ", ". ", "! ", " btw ", " but "],
                        "pl": [" i ", " - ", ", ", ". ", "! ", " btw ", " ale "],
                        "ru": [" –∏ ", " - ", ", ", ". ", "! ", " –∫—Å—Ç–∞—Ç–∏ ", " –Ω–æ "]
                    }
                    conn = random.choice(connectors.get(language, connectors["en"]))
                    if conn in [".", "!"]:
                        review_components[-1] += conn
                        review_components.append(" ".join(selected_phrases))
                    else:
                        review_components[-1] += conn + " ".join(selected_phrases)
                else:
                    review_components.append(" ".join(selected_phrases))
    
    # Komponente 3: Shop-Bezug (25% Chance)
    if random.random() < 0.25 and language in shop_references:
        if len(review_components) > 0 and random.random() < 0.5:
            # Am Ende des letzten Komponente anh√§ngen
            connectors = {
                "de": [". ", "! ", " und ", " - ", ", "],
                "en": [". ", "! ", " and ", " - ", ", "],
                "pl": [". ", "! ", " i ", " - ", ", "],
                "ru": [". ", "! ", " –∏ ", " - ", ", "]
            }
            conn = random.choice(connectors.get(language, connectors["en"]))
            if conn in [".", "!"]:
                review_components[-1] += conn
                review_components.append(random.choice(shop_references[language]))
            else:
                review_components[-1] += conn + random.choice(shop_references[language])
        else:
            review_components.append(random.choice(shop_references[language]))
    
    # Komponente 4: Social Media-Bezug (20% Chance)
    if random.random() < 0.20 and language in social_media_refs:
        if len(review_components) > 0 and random.random() < 0.5:
            # Am Ende des letzten Komponente anh√§ngen
            connectors = {
                "de": [". ", "! ", " und ", " - ", ", "],
                "en": [". ", "! ", " and ", " - ", ", "],
                "pl": [". ", "! ", " i ", " - ", ", "],
                "ru": [". ", "! ", " –∏ ", " - ", ", "]
            }
            conn = random.choice(connectors.get(language, connectors["en"]))
            if conn in [".", "!"]:
                review_components[-1] += conn
                review_components.append(random.choice(social_media_refs[language]))
            else:
                review_components[-1] += conn + random.choice(social_media_refs[language])
        else:
            review_components.append(random.choice(social_media_refs[language]))
    
    # Komponente 5: Versand-Kommentare (15% Chance)
    if random.random() < 0.15 and language in shipping_comments:
        if len(review_components) > 0:
            # Am Ende des letzten Komponente anh√§ngen
            connectors = {
                "de": [". ", "! ", " btw "],
                "en": [". ", "! ", " btw "],
                "pl": [". ", "! ", " btw "],
                "ru": [". ", "! ", " –∫—Å—Ç–∞—Ç–∏ "]
            }
            conn = random.choice(connectors.get(language, connectors["en"]))
            if conn in [".", "!"]:
                review_components[-1] += conn
                review_components.append(random.choice(shipping_comments[language]))
            else:
                review_components[-1] += conn + random.choice(shipping_comments[language])
        else:
            review_components.append(random.choice(shipping_comments[language]))
    
    # Review aus Komponenten zusammenbauen
    review = " ".join(review_components)
    
    # Jugendliche Schreibweise (15% Chance)
    if random.random() < 0.15:
        # Kein "ich" am Satzanfang
        review = re.sub(r"^Ich ", "ich ", review)
        
        # Keine Gro√üschreibung am Satzanfang (30% Chance wenn aktiviert)
        if random.random() < 0.3:
            review = review[0].lower() + review[1:]
        
        # Mehr Ausrufezeichen und Emojis
        if review and review[-1] in [".", "!"]:
            num_excl = random.choices([1, 2, 3, 4], weights=[40, 30, 20, 10], k=1)[0]
            review = review[:-1] + "!" * num_excl
            
            # Emojis hinzuf√ºgen (50% Chance wenn Ausrufezeichen vorhanden)
            if random.random() < 0.5:
                emojis = ["üíñ", "‚ú®", "üî•", "üëå", "üíØ", "üôå", "üòç", "ü§©", "ü•∞", "üíï", "‚ù§Ô∏è", "üñ§", "üëë", "üåü"]
                num_emojis = random.choices([1, 2, 3], weights=[50, 30, 20], k=1)[0]
                selected_emojis = random.sample(emojis, num_emojis)
                review += "".join(selected_emojis)
    
    return review

def generate_review_date(max_months_back=36):
    """Generiert ein zuf√§lliges Datum innerhalb der letzten 36 Monate"""
    days_back = random.randint(1, max_months_back * 30)
    review_date = datetime.now() - timedelta(days=days_back)
    return review_date.strftime('%Y-%m-%d')

def main():
    input_file = 'products_export_1 5.csv'
    output_file = 'generated_reviews.csv'
    
    products = []
    
    # Einlesen der Produktdaten
    with open(input_file, 'r', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            products.append(row)
    
    print(f"{len(products)} Produkte gefunden.")
    
    # Erstellen der Reviews
    reviews = []
    product_handles_processed = set()
    
    for product in products:
        product_handle = product.get('Handle', '')
        
        # √úberspringe Duplikate (da manche Handles mehrfach vorkommen k√∂nnen f√ºr verschiedene Varianten)
        if product_handle in product_handles_processed:
            continue
        
        product_handles_processed.add(product_handle)
        
        # Pro Produkt 3-10 Reviews erstellen (typisch f√ºr jugendliche Zielgruppe)
        num_reviews = random.randint(3, 10)
        
        for _ in range(num_reviews):
            # W√§hle eine Sprache nach der vorgegebenen Verteilung
            language = select_language()
            
            rating = generate_rating_distribution()
            reviewer_name, reviewer_email, reviewer_location = generate_reviewer_info(language)
            
            # W√§hle einen Titel in der passenden Sprache und Bewertung
            # 5% Chance auf keinen Titel (typisch f√ºr junge Reviewer)
            if random.random() < 0.05:
                review_title = ""
            else:
                if language in review_titles and rating in review_titles[language]:
                    review_title = random.choice(review_titles[language][rating])
                else:
                    # Fallback auf Englisch
                    review_title = random.choice(review_titles["en"][rating])
            
            review_content = generate_review_content(product, rating, language)
            review_date = generate_review_date(max_months_back=36)  # Innerhalb der letzten 36 Monate
            
            # 5% Chance auf keine Verifizierung
            verified = 'Yes' if random.random() > 0.05 else 'No'
            
            review = {
                'product_id': '',  # Leer lassen, wenn product_handle verwendet wird
                'product_handle': product_handle,
                'product_sku': product.get('Variant SKU', ''),
                'product_name': product.get('Title', ''),
                'reviewer_name': reviewer_name,
                'reviewer_email': reviewer_email,
                'reviewer_location': reviewer_location,
                'review_title': review_title,
                'review_content': review_content,
                'review_date': review_date,
                'image_urls': '',  # Leer lassen
                'status': 'Published',
                'rating': str(rating),
                'verified': verified,
                'reply_content': '',  # Leer lassen
                'reply_date': '',  # Leer lassen
                'is_store_review': 'false'
            }
            
            reviews.append(review)
    
    # Schreiben der generierten Reviews in eine CSV-Datei
    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = [
            'product_id', 'product_handle', 'product_sku', 'product_name', 
            'reviewer_name', 'reviewer_email', 'reviewer_location', 
            'review_title', 'review_content', 'review_date', 
            'image_urls', 'status', 'rating', 'verified', 
            'reply_content', 'reply_date', 'is_store_review'
        ]
        
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(reviews)
    
    print(f"{len(reviews)} Reviews f√ºr {len(product_handles_processed)} Produkte erstellt und in '{output_file}' gespeichert.")
    
    # Optional: Beispielreviews f√ºr ein bestimmtes Produkt anzeigen
    example_handle = "opium-gothic-mesh-top"
    example_reviews = [review for review in reviews if review['product_handle'] == example_handle]
    
    if example_reviews:
        print(f"\nBeispiel-Reviews f√ºr '{example_handle}':")
        for i, review in enumerate(example_reviews, 1):
            print(f"\nReview {i}:")
            print(f"Sprache: {('DE' if review['reviewer_location'] in ['DE', 'AT', 'CH'] else 'EN' if review['reviewer_location'] in ['US', 'UK', 'CA', 'AU'] else 'PL' if review['reviewer_location'] == 'PL' else 'RU')}")
            print(f"Bewertung: {review['rating']} Sterne")
            print(f"Titel: {review['review_title']}")
            print(f"Inhalt: {review['review_content']}")
            print(f"Datum: {review['review_date']}")
            print(f"Rezensent: {review['reviewer_name']} aus {review['reviewer_location']}")
    else:
        print(f"\nKein Produkt mit dem Handle '{example_handle}' gefunden.")

if __name__ == "__main__":
    main()